module EulerProblems where 

import Data.List
import Data.Char

isPrime :: Int -> Bool
isPrime n = if n > 1 
            then null [ x | x <- [2..isqrt n], n `mod` x == 0] 
            else False

isqrt :: Int -> Int
isqrt = round . sqrt . fromIntegral

factors :: Int -> [Int]
factors n = rmdups $ foldl (\acc x -> if n `mod` x == 0 
                                      then acc ++ [x, n `quot` x] 
                                      else acc) [] [ 1 .. isqrt n]

factors' :: Int -> [Int]
factors' n = rmdups $ foldl (\acc x -> if n `mod` x == 0 
                                       then acc ++ [x, n `quot` x] 
                                       else acc) [] [ 2 .. isqrt n]

rmdups :: (Eq a) => [a] -> [a]
rmdups [] = []
rmdups [x] = [x]
rmdups (x:xs) = x : [ k  | k <- rmdups xs, k /= x ]

multipliers :: Int -> [Int]
multipliers n = go n []
    where go n ms
           | factors' n == [] = ms ++ [n]
           | otherwise        =  let divider = minimum . factors' $ n 
                                  in  go (n `quot` divider) (ms ++ [divider])

-- PROBLEM 1
-- If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
-- Find the sum of all the multiples of 3 or 5 below 1000.

multOf3or5 :: Int -> Int
multOf3or5 n = algSum 5 (maxElem (n - 1) 5) + algSum 3 (maxElem (n - 1) 3) - algSum 15 (maxElem (n - 1) 15)      
 where maxElem n d = n - n `mod` d
       elemNumber n d
        | n `mod` d /= 0 = error $ show n ++ "is not an elem of this algebraic progression"
        | otherwise      = n `quot` d + 1
       algSum d e  = ( d * ( en - 1 ) * en ) `quot` 2 
        where en = elemNumber e d

-- PROBLEM 2
-- Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
-- 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
-- By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

fibSumEven :: Integer -> Integer
fibSumEven n
 | n `mod` 2 == 0 = ( fib $ n + 1 ) - 1
 | otherwise      = ( fib n ) - 1
 where fib n = go 2 1 n
         where  go curr prev n
                 | n == 0    = prev
                 | otherwise = go ( curr + prev ) curr (n - 1)

-- PROBLEM 3
-- The prime factors of 13195 are 5, 7, 13 and 29.
-- What is the largest prime factor of the number 600851475143 ?

maxPrimeFactorOf :: Int -> Int
maxPrimeFactorOf n = foldl (\acc x -> if and [isPrime x, x > acc] 
                                      then x 
                                      else acc ) 1 (factors n)

-- PROBLEM 4
-- A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
-- Find the largest palindrome made from the product of two 3-digit numbers.

maxPalindrome :: Int
maxPalindrome = go (init ns) (last ns) (-1)
 where go ls h p
        | p /= (-1)   = p
        | otherwise = go (init ls) (last ls) $ if isPalindrome h 
                                               then h 
                                               else p  
       ns = sort $ foldl (\acc x -> acc ++ [x * p | p <- [110, 121 .. 990]]) [] [100 .. 999]
       isPalindrome n = (show n ==) . reverse . show $ n

-- PROBLEM 5
-- 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
-- What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?

smallestMultiple :: Int
smallestMultiple = foldl (\acc x -> makeDividableBy x acc) base ms  
    where   
          makeDividableBy xs b = (b *) . (foldl (*) 1) . snd $ foldl (\(d, ms) x -> if d `mod` x == 0 
                                                                                    then (d `quot` x, ms) 
                                                                                    else (d, x : ms) ) (b, []) xs 
          ms = foldl (\acc x -> multipliers x : acc) [] notPrimes
          notPrimes = [ x | x <- [1 .. 20], not $ isPrime x ]
          base = foldl (*) 1 [ x | x <- [1 .. 20], isPrime x ]


-- PROBLEM 6
-- The sum of the squares of the first ten natural numbers is 385,
-- The square of the sum of the first ten natural numbers is 3025,
-- Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 2640.
-- Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.

sumSqDiff :: Int
sumSqDiff = (sqOfSum 20) - (sumOfSqs 20)  
 where sumOfSqs n = (n * (n + 1) * (2 * n + 1)) `quot` 6
       sqOfSum n = ( algSum 1 1 n ) ^ 2
       algSum a1 d n = ((2 * a1 + d *(n - 1)) * n) `quot` 2

-- PROBLEM 7
-- By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
-- What is the 10 001st prime number?

prime10001 :: Int
prime10001 = [x | x <- [1 .. ], isPrime x] !! 10000

-- PROBLEM 8
-- The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

-- 73167176531330624919225119674426574742355349194934
-- 96983520312774506326239578318016984801869478851843
-- 85861560789112949495459501737958331952853208805511
-- 12540698747158523863050715693290963295227443043557
-- 66896648950445244523161731856403098711121722383113
-- 62229893423380308135336276614282806444486645238749
-- 30358907296290491560440772390713810515859307960866
-- 70172427121883998797908792274921901699720888093776
-- 65727333001053367881220235421809751254540594752243
-- 52584907711670556013604839586446706324415722155397
-- 53697817977846174064955149290862569321978468622482
-- 83972241375657056057490261407972968652414535100474
-- 82166370484403199890008895243450658541227588666881
-- 16427171479924442928230863465674813919123162824586
-- 17866458359124566529476545682848912883142607690042
-- 24219022671055626321111109370544217506941658960408
-- 07198403850962455444362981230987879927244284909188
-- 84580156166097919133875499200524063689912560717606
-- 05886116467109405077541002256983155200055935729725
-- 71636269561882670428252483600823257530420752963450

-- Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?

number = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450"

-- brute force
maxProdSeries :: (Integer, Int)
maxProdSeries = foldl (\(num, prod) x -> let p = multPart x in if p > prod then (read x :: Integer, p ) else (num, prod)) (0 , 0) (parts number [])
 where parts (d:num) ps
        | length num < 12 = ps
        | otherwise       = parts num ((d : take 12 num) : ps)
       multPart p = foldl (\acc x -> acc * ( digitToInt x)) 1 p

-- optimized
maxProdSeries' :: (Integer, Int)
maxProdSeries' = let ps = parts number []
                     seq = go 1 (ps !! 0) (ps !! 1) (drop 2 ps) in (read seq:: Integer, multPart seq) 
 where go dist prev curr [] =  if compareParts dist prev curr then prev else curr 
       go dist prev curr (p : ps) = go d pr p ps 
        where d = if cmp then dist + 1 else 1 
              pr = if cmp then prev else curr
              cmp = compareParts dist prev curr
       parts (d:num) ps
        | length num < 12 = ps
        | otherwise       = parts num (ps ++ [(d : take 12 num)])
       compareParts n p1 p2 = (multPart . (take n) $ p1) > (multPart . (drop (13 - n)) $ p2)
        where k = if n > 13 then 13 else n 
       multPart p = foldl (\acc x -> acc * ( digitToInt x)) 1 p

-- PROBLEM 9
-- A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
-- a2 + b2 = c2
-- For example, 32 + 42 = 9 + 16 = 25 = 52.
-- There exists exactly one Pythagorean triplet for which a + b + c = 1000.
-- Find the product abc.

specialPythagoreanTriplet :: Int
specialPythagoreanTriplet = head [a * b * c | a <- [ 1..quot n 3 ], b <- [ a..quot n 2], let c = n - a - b, a^2 + b^2 == c^2]
 where n = 1000

-- PROBLEM 10
-- The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
-- Find the sum of all the primes below two million.

primesSum = go [2 .. 2000000] 0 0
    where go a n r
           | length a <= n = r
           | otherwise = go ([ x | x <- a, isToDel x (a !! n)]) (n + 1) (r + a !! n)
           where isToDel val curr = or  [val `mod` curr /= 0, val == curr] 
